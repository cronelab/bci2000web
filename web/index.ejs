<!DOCTYPE html>

<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>BCI2000 Browser</title>

  <!-- Styles -->
  <link rel="stylesheet" type="text/css" href="node_modules/bootstrap/dist/css/bootstrap.css">
  <link rel="stylesheet" type="text/css" href="index.css">
  <script src="node_modules/tether/dist/js/tether.min.js"></script>
  <script src="node_modules/jquery/dist/jquery.min.js"></script>
  <script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
  <script src="node_modules/bci2k/dist/bci2k.js"></script>

</head>

<body>

  <nav class="navbar navbar-light fixed-top">
    <div class="container">
      <div class="navbar-header">
        <a class="navbar-brand" href="#">BCI2000</a>
      </div>
    </div>
  </nav>

  <div class="container">
    <div class="row">
      <div class="col-md-3 col-sm-4">
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">System</h3>
          </div>
          <div class="list-group">
            <li id="state-label" class="list-group-item bigger text-center text-muted">
              <strong>Not Connected</strong>
            </li>
            <a id="reset-button" class="list-group-item list-group-item-danger disabled" onclick="checkReset()">
              <span class="glyphicon glyphicon-repeat"></span> <strong>Reset</strong>
            </a>
            <a href="replay" target="_blank" class="list-group-item bigger">
                <span class="glyphicon glyphicon-play"></span> Replay
            </a> 
            <a href="#" class="list-group-item bigger" onclick="getChannels()">Query channels</a>
          </div>
        </div>
      </div>

      <div class="col-md-4 col-sm-3">
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">Paradigms</h3>
          </div>
          <ul id="paradigms-list" class="list-group">
            <% cards.forEach( function( card ) { %>
              <a id="paradigm-link-<%- card.name; %>" href="#<%- card.name; %>" class="list-group-item" onclick="selectParadigm('<%- card.name %>')">
                <%- card.name; %>
              </a>
            <% } ); %>
          </ul>
        </div>
      </div>

      <div id="paradigms-container" class="col-md-5 col-sm-5">
        <% cards.forEach( function( card ) { %>
          <div id="paradigm-<%- card.name; %>" style="display: none">
            <%- include( card.path, {
              cardRoot: card.root
            } ); %>
          </div>
        <% } ) %>
      </div>
    </div>
  </div> <!-- /container -->

  <div id="reset-modal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title">Are you sure?</h4>
        </div>
        <div class="modal-body">
          <p>The BCI2000 system state is currently <strong>Running</strong>. This means that BCI2000 is currently recording and saving data. There could be an experiment running.</p>
          <p>Are you sure you want to reset the system?</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="doReset()">Reset system</button>
        </div>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->

  <footer class="footer">
    <div class="container">
      <p class="text-muted">Fork me on <a href="http://github.com/cronelab/bci2000web">GitHub</a>. Powered by <a href="#">Bootstrap</a> and <a href="#">node.js</a>.</p>
    </div>
  </footer>

  <div id="channelSelector" class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="classInfo" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
            Ã—
          </button>
          <h4 class="modal-title" id="classModalLabel">
                Class Info
              </h4>
        </div>
        <div class="modal-body">
          <table id="classTable" class="table table-bordered">
            <thead>
            </thead>
            <tbody>
              <tr>
                <td>Channels</td>
                <td>Exclude</td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-dismiss="modal">
            Close
          </button>
          <button type="button" id="saveButton" class="btn btn-primary" data-dismiss="modal">
            Save
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- ===================================================== -->
  <!-- Scripts -->

  <script>
    
    var bci = new BCI2K.Connection();
    var systemState = null;

    function onlyUnique(value, index, self) { 
        return self.indexOf(value) === index;
    }

    function getChannels(){

      bci.execute('List Parameter channelNames', function(result){
        var totalChannels = result.output.substring(result.output.indexOf("="), result.output.indexOf("//")-1).split(" ").slice(2);
        var channels = result.output.substring(result.output.indexOf("="), result.output.indexOf("//")-1).split(" ").slice(2);

        let channelTable = document.getElementById("classTable")
        
        excludedChannels = []
        
        channels.forEach(function(ch, index){
          let checkbox = document.createElement('input');
          checkbox.type = "checkbox";
          checkbox.id = ch;

          checkbox.addEventListener( 'change', function() {
              if(this.checked) {
                document.getElementById(this.id).parentElement.style.background = "red";
                excludedChannels.push(document.getElementById(this.id).id)
              } else {
                document.getElementById(this.id).parentElement.style.background = ""
                excludedChannels.splice( excludedChannels.indexOf(document.getElementById(this.id).id), 1 );
              }
          });

          let newRow = channelTable.insertRow(index+1)
          newRow.insertCell(0).innerHTML = ch
          newRow.insertCell(1).appendChild(checkbox)
                    

        })

      document.getElementById('channelSelector').modal('show')


    var textFile = null,
      makeTextFile = function (text) {
        var data = new Blob([text], {type: 'text/plain'});
        if (textFile !== null) {
          window.URL.revokeObjectURL(textFile);
        }
        textFile = window.URL.createObjectURL(data);
        return textFile;
      };

        let saveButton = document.getElementById("saveButton")

        saveButton.addEventListener('click', function () {
          var link = document.createElement('a');
          link.setAttribute('download', 'CAR.prm');

          excludedChannels.forEach(exCh =>{
            for(let i = channels.length;i--;){
              if(channels[i]===exCh) channels.splice(i,1);
            }
          })
          _excludedChannels = excludedChannels.join(' ')
          let chBlock = []
          let channelBlock_ = []
          let channelBlock = []
          channels.forEach(ch =>{
            ch.split('').forEach(function(letter){
              if(isNaN(parseInt(letter,10))){
                chBlock.push(letter)
              }
              else{
                if(chBlock.length!=0){
                    channelBlock_.push(chBlock.join(""))
                    chBlock = [];
                }
              }
            })
            })

          _channels = channels.join(' ')
          _channelBlock_ = channelBlock_.join(' ')
          _totalChannels = totalChannels.join(' ')
          let carParameters = 
          `Filtering:SimpleCAR:SimpleCAR:FilePlaybackADC int EnableSimpleCAR= 2 0 0 2
  Filtering:SimpleCAR:SimpleCAR:FilePlaybackADC stringlist ExcludeChannels= ${excludedChannels.length} ${_excludedChannels}
  Filtering:SimpleCAR:SimpleCAR stringlist CARChannels= ${channels.length} ${_channels}
  Filtering:SimpleCAR:SimpleCAR stringlist CARBlocks= ${channelBlock_.length} ${_channelBlock_}
  Filtering:SimpleCAR:SimpleCAR stringlist CAROutputChannels= ${totalChannels.length} ${_totalChannels}`

          link.href = makeTextFile(carParameters);
          document.body.appendChild(link);
          window.requestAnimationFrame(function () {
            var event = new MouseEvent('click');
            link.dispatchEvent(event);
            document.body.removeChild(link);
          });
        }, false);
      });
    }

    function selectParadigm( cardName ) {
        // Hide all paradigms
        let allParadigms = document.getElementById(`paradigms-container`).children
        for(let paras of allParadigms){
          paras.style.display = "none";
        }
        // Show this paradigm
        document.getElementById(`paradigm-${cardName}`).style.display = "block";
    };

    function getState() {
        bci.execute( 'Get System State', function( result ) {
            systemState = result.output.trim();

            document.getElementById('state-label').innerHTML =  '<strong>' + systemState + '</strong>';
            let stateClasses = {
                Running: 'text-success',
                Suspended: 'text-warning',
                Idle: 'text-info'
            };

            // Clear existing classes
            Object.keys( stateClasses ).forEach( function( key ) {
                document.getElementById('state-label').classList.remove( stateClasses[key] );
            } );

            var curStateClass = stateClasses[systemState];

            if ( curStateClass ) {
                document.getElementById('state-label').classList.add( curStateClass );
            }

        } );
        setTimeout( getState, 1000 );
    }

    bci.onconnect = event => {
        getState();
        document.getElementById('reset-button' ).classList.remove( 'disabled' );
    }

    bci.ondisconnect = event => {
        document.getElementById('reset-button' ).classList.add( 'disabled' );
    }

    function checkReset() {
        if( systemState == null ) {
            return;
        } else if( systemState == 'Running' ) {
            document.getElementById('reset-modal').modal();
        } else {
          doReset();
        }           
    }

    function doReset() {
        bci.resetSystem();
    }

    bci.connect();

  </script>
</body>
</html>